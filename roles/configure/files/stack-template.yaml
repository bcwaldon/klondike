AWSTemplateFormatVersion: '2010-09-09'
Description: klondike - Kubernetes cluster
Resources:
  ControllerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Ref: ControllerIAMInstanceProfile
      ImageId:
        Ref: CoreOSImageID
      InstanceType:
        Ref: ControllerInstanceType
      SecurityGroups:
      - Ref: ControllerSecurityGroup
      UserData:
        Ref: ControllerUserData
      EbsOptimized:
        Ref: ControllerEbsOptimized
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize:
            Ref: ControllerInstanceRootDiskSize
          VolumeType: gp2
          DeleteOnTermination: true
    Metadata:
      AWS::CloudFormation::Designer:
        id: d0fb5fdb-de68-459c-ab39-a326ea5abdf3
  ControllerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize:
        Ref: ControllerInstanceCount
      MaxSize:
        Ref: ControllerInstanceCount
      DesiredCapacity:
        Ref: ControllerInstanceCount
      LaunchConfigurationName:
        Ref: ControllerLC
      AvailabilityZones:
      - Ref: AvailabilityZone
      Tags:
      - Key: KubernetesCluster
        Value:
          Ref: ClusterName
        PropagateAtLaunch: true
      - Key: group
        Value: controller
        PropagateAtLaunch: true
      LoadBalancerNames:
      - Ref: ControllerPrivateELB
      VPCZoneIdentifier:
      - Ref: ControllerSubnet
    Metadata:
      AWS::CloudFormation::Designer:
        id: 46c5f359-b0f8-400a-924a-7416577bb1e4
  WorkerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1
      MaxSize: 100
      DesiredCapacity:
        Ref: WorkerInstanceCount
      LaunchConfigurationName:
        Ref: WorkerLC
      AvailabilityZones:
      - Ref: AvailabilityZone
      VPCZoneIdentifier:
      - Ref: WorkerSubnet
      Tags:
      - Key: KubernetesCluster
        Value:
          Ref: ClusterName
        PropagateAtLaunch: true
      - Key: group
        Value: worker
        PropagateAtLaunch: true
    Metadata:
      AWS::CloudFormation::Designer:
        id: 920bfac1-4e49-4e20-a9f3-13881159c775
  WorkerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Ref: WorkerIAMInstanceProfile
      ImageId:
        Ref: CoreOSImageID
      InstanceType:
        Ref: WorkerInstanceType
      SecurityGroups:
      - Ref: WorkerSecurityGroup
      UserData:
        Ref: WorkerUserData
      EbsOptimized:
        Ref: WorkerEbsOptimized
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize:
            Ref: WorkerInstanceRootDiskSize
          Iops:
            Ref: WorkerInstanceRootDiskIOPs
          VolumeType: gp2
          DeleteOnTermination: true
    Metadata:
      AWS::CloudFormation::Designer:
        id: f1eabfda-793d-4e4c-b98e-fcb8acf8c0cb
  ControllerIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: ControllerIAMRole
    Metadata:
      AWS::CloudFormation::Designer:
        id: f77c932d-e2ff-48ee-b941-decf296031a5
  ControllerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      Policies:
      - PolicyName: kubernetes-describe-instances
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            Resource: "*"
      - PolicyName: kubernetes-cloudprovider-elb-management
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
            - elasticloadbalancing:AttachLoadBalancerToSubnets
            - elasticloadbalancing:ConfigureHealthCheck
            - elasticloadbalancing:CreateLoadBalancer
            - elasticloadbalancing:CreateLoadBalancerListeners
            - elasticloadbalancing:DeleteLoadBalancerListeners
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:DescribeLoadBalancers
            - elasticloadbalancing:DetachLoadBalancerFromSubnets
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:CreateSecurityGroup
            - ec2:CreateTags
            - ec2:DeleteSecurityGroup
            - ec2:DescribeRouteTables
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSubnets
            - ec2:RevokeSecurityGroupIngress
            Resource: "*"
      - PolicyName: kubernetes-cloudprovider-route-management
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateRoute
            - ec2:DeleteRoute
            - ec2:DescribeRouteTables
            - ec2:ModifyInstanceAttribute
            Resource: "*"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
    Metadata:
      AWS::CloudFormation::Designer:
        id: e35ecfc4-b188-4813-ae0f-de0d64b4be50
  WorkerIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: WorkerIAMRole
    Metadata:
      AWS::CloudFormation::Designer:
        id: 54a2c1e8-5f96-46e2-977d-277bf296f00f
  WorkerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      Policies:
      - PolicyName: ec2-describe-all
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:Describe*
            Resource: "*"
      - PolicyName: ebs-manage-attachment
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:AttachVolume
            - ec2:DetachVolume
            Resource: "*"
      - PolicyName: elb-describe-and-manage-instances
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:DescribeLoadBalancers
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            Resource: "*"
      - PolicyName: ecr-readonly
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:DescribeRepositories
            - ecr:GetAuthorizationToken
            - ecr:GetDownloadUrlForLayer
            - ecr:GetManifest
            - ecr:ListImages
            Effect: Allow
            Resource: "*"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
    Metadata:
      AWS::CloudFormation::Designer:
        id: d66420b2-c64b-426d-97f6-5665037fa31f
  ControllerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ControllerSecurityGroup
      VpcId:
        Ref: ClusterVPC
      SecurityGroupEgress:
      - IpProtocol: TCP
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: UDP
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: ICMP
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: ICMP
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: TCP
        FromPort: 4194
        ToPort: 4194
        CidrIp: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Designer:
        id: 4cd01314-51ae-4fac-9c95-36004183543b
  ControllerSecurityGroupIngressEtcd:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ControllerSecurityGroup
      SourceSecurityGroupId:
        Ref: ControllerSecurityGroup
      FromPort: 2380
      ToPort: 2380
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: cd2f2754-a1e2-4275-a6e6-ec164c7a1dbf
  ControllerSecurityGroupIngressELBToAPI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ControllerSecurityGroup
      SourceSecurityGroupId:
        Ref: ControllerPrivateELBSecurityGroup
      FromPort: 6443
      ToPort: 6443
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: 63fb8b3c-ade4-4fab-a675-c2a2b30eb4a0
  ControllerSecurityGroupIngressWorkerToAPI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ControllerSecurityGroup
      SourceSecurityGroupId:
        Ref: WorkerSecurityGroup
      FromPort: 6443
      ToPort: 6443
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: 63fb8b3c-ade4-4fab-a675-c2a2b30eb4a0
  ControllerSecurityGroupIngressBastionSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ControllerSecurityGroup
      SourceSecurityGroupId:
        Ref: BastionSecurityGroup
      FromPort: 22
      ToPort: 22
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: 11c76f59-2ebe-409b-9a55-e5f1e92b0ab9
  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WorkerSecurityGroup
      VpcId:
        Ref: ClusterVPC
      SecurityGroupEgress:
      - IpProtocol: TCP
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: UDP
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: ICMP
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: ICMP
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: TCP
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: TCP
        FromPort: 4194
        ToPort: 4194
        CidrIp: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Designer:
        id: 251f6d10-84e4-44a1-b93e-67bbe9078fba
  WorkerSecurityGroupIngressBastionSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: WorkerSecurityGroup
      SourceSecurityGroupId:
        Ref: BastionSecurityGroup
      FromPort: 22
      ToPort: 22
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: c43e1ade-963e-4a64-91a6-2071205264f5
  WorkerSecurityGroupIngressControllerToKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: WorkerSecurityGroup
      SourceSecurityGroupId:
        Ref: ControllerSecurityGroup
      FromPort: 10250
      ToPort: 10250
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: cd2f2754-a1e2-4275-a6e6-ec164c7a1dbf
  WorkerSecurityGroupIngressControllerToCAdvisor:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: WorkerSecurityGroup
      SourceSecurityGroupId:
        Ref: ControllerSecurityGroup
      FromPort: 4194
      ToPort: 4194
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: e541f9e6-602c-4226-9421-bf5178777cac
  WorkerSecurityGroupIngressSelfTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: WorkerSecurityGroup
      SourceSecurityGroupId:
        Ref: WorkerSecurityGroup
      FromPort: 0
      ToPort: 65535
      IpProtocol: TCP
  WorkerSecurityGroupIngressSelfUDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: WorkerSecurityGroup
      SourceSecurityGroupId:
        Ref: WorkerSecurityGroup
      FromPort: 0
      ToPort: 65535
      IpProtocol: UDP
  WorkerSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ClusterVPC
      CidrBlock:
        Ref: WorkerSubnetCIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Ref: AvailabilityZone
      Tags:
      - Key: KubernetesCluster
        Value:
          Ref: ClusterName
      - Key: kubernetes.io/role/internal-elb
        Value: 'true'
    Metadata:
      AWS::CloudFormation::Designer:
        id: 6c2ea801-0bfa-4e7b-92c8-3eef2f97dcce
  ControllerSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ClusterVPC
      CidrBlock:
        Ref: ControllerSubnetCIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Ref: AvailabilityZone
    Metadata:
      AWS::CloudFormation::Designer:
        id: f591c362-5976-4efe-aca1-f1c0cb9f31af
  PublicNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: PublicSubnet
      AllocationId:
        Fn::GetAtt:
        - PublicNATGatewayIP
        - AllocationId
    Metadata:
      AWS::CloudFormation::Designer:
        id: dd161430-6440-4ef3-856b-99c6e8a6bbc5
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ClusterVPC
    Metadata:
      AWS::CloudFormation::Designer:
        id: 37fc6d23-1902-4172-ab24-1c0cd8eab5b7
  ControllerSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: ControllerSubnet
    Metadata:
      AWS::CloudFormation::Designer:
        id: 3ea679dd-6851-4f71-b9da-063ff1955416
  PublicRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: ClusterInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Designer:
        id: 3ecb5892-f24a-4c85-aa24-e275f34308a1
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ClusterVPC
      Tags:
      - Key: KubernetesCluster
        Value:
          Ref: ClusterName
    Metadata:
      AWS::CloudFormation::Designer:
        id: 873403fc-c264-4f6b-86ae-092abee2a1d0
  PrivateRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      NatGatewayId:
        Ref: PublicNATGateway
      DestinationCidrBlock: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Designer:
        id: fe300dd1-8127-4ecf-a1f2-39141a6e498f
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet
    Metadata:
      AWS::CloudFormation::Designer:
        id: 505c2107-b4cb-466c-a646-6caadb889c56
  WorkerSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: WorkerSubnet
    Metadata:
      AWS::CloudFormation::Designer:
        id: 628052e5-746b-4228-8295-5d536a59f131
  PublicNATGatewayIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      AWS::CloudFormation::Designer:
        id: 7b1d4d3c-5b8f-4e75-b58f-824172bbf1cc
  ControllerPrivateELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
      - Ref: ControllerSubnet
      SecurityGroups:
      - Ref: ControllerPrivateELBSecurityGroup
      Listeners:
      - InstancePort: 6443
        InstanceProtocol: TCP
        LoadBalancerPort: 443
        Protocol: TCP
      HealthCheck:
        Target: TCP:6443
        HealthyThreshold: '2'
        Interval: '6'
        Timeout: '5'
        UnhealthyThreshold: '2'
    Metadata:
      AWS::CloudFormation::Designer:
        id: 81ac2c65-7edd-45b6-a300-2e0f5576cd84
  ControllerPrivateELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ControllerPrivateELBSecurityGroup
      VpcId:
        Ref: ClusterVPC
      SecurityGroupIngress:
      - IpProtocol: TCP
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Designer:
        id: 317ab59f-2379-451a-9fbc-c397fd31dd5c
  ControllerPrivateELBDNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:
        Fn::Join:
        - ''
        - - Ref: HostedZone
          - "."
      Name:
        Fn::Join:
        - ''
        - - api.
          - Ref: HostedZone
          - "."
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - Fn::GetAtt:
        - ControllerPrivateELB
        - DNSName
    Metadata:
      AWS::CloudFormation::Designer:
        id: 0374cc4d-4484-4e1e-bc01-7817a99d2f72
    DependsOn:
    - ClusterHostedZone
  BastionDNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:
        Fn::Join:
        - ''
        - - Ref: HostedZone
          - "."
      Name:
        Fn::Join:
        - ''
        - - bastion.
          - Ref: HostedZone
          - "."
      Type: A
      TTL: '300'
      ResourceRecords:
      - Fn::GetAtt:
        - BastionInstance
        - PrivateIp
    Metadata:
      AWS::CloudFormation::Designer:
        id: 0374cc4d-4484-4e1e-bc01-7817a99d2f72
    DependsOn:
    - ClusterHostedZone
  BastionNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId:
        Ref: ControllerSubnet
      GroupSet:
      - Fn::GetAtt:
        - BastionSecurityGroup
        - GroupId
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      NetworkInterfaces:
      - NetworkInterfaceId:
          Ref: BastionNetworkInterface
        DeviceIndex: 0
      IamInstanceProfile:
        Ref: BastionIAMInstanceProfile
      ImageId:
        Ref: UbuntuImageID
      InstanceType:
        Ref: BastionInstanceType
      UserData:
        Ref: BastionUserData
      EbsOptimized:
        Ref: BastionEbsOptimized
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize:
            Ref: BastionInstanceRootDiskSize
          VolumeType: gp2
          DeleteOnTermination: true
      Tags:
      - Key: KubernetesCluster
        Value:
          Ref: ClusterName
      - Key: group
        Value: bastion
    Metadata:
      AWS::CloudFormation::Designer:
        id: c1dcc697-c876-4d7d-b222-18013870cef9
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BastionSecurityGroup
      VpcId:
        Ref: ClusterVPC
      SecurityGroupEgress:
      - IpProtocol: TCP
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: UDP
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: ICMP
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: ICMP
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: TCP
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Designer:
        id: 4719e386-5f75-42ec-9fb2-91f8386f9f87
  BastionIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: BastionIAMRole
    Metadata:
      AWS::CloudFormation::Designer:
        id: 13349f45-7e38-4fcc-a295-fe5b69a132ca
  BastionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      Policies:
      - PolicyName: ec2-describe-instances
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: ec2:DescribeInstances
            Resource: "*"
      - PolicyName: s3-read-cluster-config
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: S3ConfigBucket
          - Action:
            - s3:GetObject
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: S3ConfigBucket
                - "/authorized_keys.d/*"
          - Action:
            - s3:GetObject
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: S3ConfigBucket
                - "/klondike-cluster-"
                - Ref: ClusterName
                - ".tar.gz"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
    Metadata:
      AWS::CloudFormation::Designer:
        id: d3385b05-b7cc-42cb-a04d-4f49389dfc3d
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ClusterVPC
      CidrBlock:
        Ref: PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Ref: AvailabilityZone
      Tags:
      - Key: KubernetesCluster
        Value:
          Ref: ClusterName
    Metadata:
      AWS::CloudFormation::Designer:
        id: 314120e5-87bf-4791-80ae-cd443fad4186
  GatewayASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize:
        Ref: GatewayInstanceCount
      MaxSize:
        Ref: GatewayInstanceCount
      DesiredCapacity:
        Ref: GatewayInstanceCount
      LaunchConfigurationName:
        Ref: GatewayLC
      AvailabilityZones:
      - Ref: AvailabilityZone
      Tags:
      - Key: KubernetesCluster
        Value:
          Ref: ClusterName
        PropagateAtLaunch: true
      - Key: group
        Value: gateway
        PropagateAtLaunch: true
      VPCZoneIdentifier:
      - Ref: ControllerSubnet
      LoadBalancerNames:
      - Ref: GatewayPublicELB
      - Ref: GatewayPrivateELB
    Metadata:
      AWS::CloudFormation::Designer:
        id: 709e8f08-6b1d-4ca0-ab00-1d1486528d41
  GatewayLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Ref: GatewayIAMInstanceProfile
      ImageId:
        Ref: CoreOSImageID
      InstanceType:
        Ref: GatewayInstanceType
      SecurityGroups:
      - Ref: GatewaySecurityGroup
      UserData:
        Ref: GatewayUserData
      EbsOptimized:
        Ref: GatewayEbsOptimized
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize:
            Ref: GatewayInstanceRootDiskSize
          VolumeType: gp2
          DeleteOnTermination: true
    Metadata:
      AWS::CloudFormation::Designer:
        id: 428b2995-219a-422e-a4b6-bc7c91ff2828
  GatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: GatewaySecurityGroup
      VpcId:
        Ref: ClusterVPC
      SecurityGroupEgress:
      - IpProtocol: TCP
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: UDP
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: ICMP
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: ICMP
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: TCP
        FromPort: 4194
        ToPort: 4194
        CidrIp: 0.0.0.0/0
      - IpProtocol: TCP
        FromPort: 7331
        ToPort: 7331
        CidrIp: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Designer:
        id: 4382883d-ccbb-4b33-934c-19e73f682e7f
  WorkerSecurityGroupIngressGatewayTraffic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: WorkerSecurityGroup
      SourceSecurityGroupId:
        Ref: GatewaySecurityGroup
      FromPort: 0
      ToPort: 65535
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: a9264ada-b3d0-4aad-a78b-5a316d53390b
  GatewaySecurityGroupIngressBastionSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: GatewaySecurityGroup
      SourceSecurityGroupId:
        Ref: BastionSecurityGroup
      FromPort: 22
      ToPort: 22
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: 9fca00aa-30f9-4b28-9fdc-5459f77dabc2
  GatewayIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: GatewayIAMRole
    Metadata:
      AWS::CloudFormation::Designer:
        id: 39d0a20d-1063-4d2b-9109-27cbf321ddcd
  GatewayIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      Policies:
      - PolicyName: kubernetes-describe-instances
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            Resource: "*"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
    Metadata:
      AWS::CloudFormation::Designer:
        id: b0f95c49-7207-4b33-b319-226f6653b599
  GatewayPublicELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
      - Ref: PublicSubnet
      SecurityGroups:
      - Ref: GatewayPublicELBSecurityGroup
      Listeners:
      - InstancePort: 7330
        InstanceProtocol: TCP
        LoadBalancerPort: 80
        Protocol: TCP
      HealthCheck:
        Target: TCP:7330
        HealthyThreshold: '2'
        Interval: '6'
        Timeout: '5'
        UnhealthyThreshold: '2'
    Metadata:
      AWS::CloudFormation::Designer:
        id: 1bbd2641-5532-431b-a1dd-a7dd893e58db
  ControllerSecurityGroupIngressFromGatewayPublicELB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ControllerSecurityGroup
      SourceSecurityGroupId:
        Ref: GatewayPublicELBSecurityGroup
      FromPort: 7330
      ToPort: 7330
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: 69e0901d-92ad-4175-b3f2-1f6618904efe
  GatewayPublicELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: GatewayPublicELBSecurityGroup
      VpcId:
        Ref: ClusterVPC
      SecurityGroupIngress:
      - IpProtocol: TCP
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Designer:
        id: 1cc85fdc-e298-4914-849e-7a7f18364e85
  GatewayPrivateELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
      - Ref: ControllerSubnet
      SecurityGroups:
      - Ref: GatewayPrivateELBSecurityGroup
      Listeners:
      - InstancePort: 7331
        InstanceProtocol: TCP
        LoadBalancerPort: 80
        Protocol: TCP
      HealthCheck:
        Target: TCP:7331
        HealthyThreshold: '2'
        Interval: '6'
        Timeout: '5'
        UnhealthyThreshold: '2'
    Metadata:
      AWS::CloudFormation::Designer:
        id: 1d4a5fec-f915-4f8b-afef-87442f63ecec
  GatewayPrivateELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: GatewayPrivateELBSecurityGroup
      VpcId:
        Ref: ClusterVPC
      SecurityGroupIngress:
      - IpProtocol: TCP
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Designer:
        id: 255d4787-f655-4580-a914-8fddeba1bc2d
  ControllerSecurityGroupIngressFromGatewayPrivateELB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ControllerSecurityGroup
      SourceSecurityGroupId:
        Ref: GatewayPrivateELBSecurityGroup
      FromPort: 7331
      ToPort: 7331
      IpProtocol: TCP
    Metadata:
      AWS::CloudFormation::Designer:
        id: d8239a35-58e3-4723-adf3-f524c1f86af9
  ClusterHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name:
        Ref: HostedZone
      HostedZoneTags:
      - Key: KubernetesCluster
        Value:
          Ref: ClusterName
      VPCs:
      - VPCId:
          Ref: ClusterVPC
        VPCRegion:
          Ref: AWS::Region
      - VPCId:
          Ref: PeerVPC
        VPCRegion:
          Ref: AWS::Region
    Metadata:
      AWS::CloudFormation::Designer:
        id: 1ece2221-9e15-4bab-9567-3dbf55137b44
  GatewayPrivateELBDNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:
        Fn::Join:
        - ''
        - - Ref: HostedZone
          - "."
      Name:
        Fn::Join:
        - ''
        - - "*.gateway."
          - Ref: HostedZone
          - "."
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - Fn::GetAtt:
        - GatewayPrivateELB
        - DNSName
    Metadata:
      AWS::CloudFormation::Designer:
        id: 74e76bcc-cb53-4b2d-94ef-51fb3dfb196c
    DependsOn:
    - ClusterHostedZone
  RoutePrivateSubnetToPeerVPC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock:
        Ref: PeerNetworkCIDR
      VpcPeeringConnectionId:
        Ref: PeerConnectionID
    Metadata:
      AWS::CloudFormation::Designer:
        id: 168d81a9-a92e-403e-bb34-f8e451c845f8
  ClusterVPNGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties:
      RouteTableIds:
      - Ref: PrivateRouteTable
      VpnGatewayId:
        Ref: ClusterVPNGateway
Parameters:
  CoreOSImageID:
    Type: AWS::EC2::Image::Id
    Description: Launch Controller and Worker EC2 Instances using this CoreOS AMI
  UbuntuImageID:
    Type: AWS::EC2::Image::Id
    Description: Launch Bastion EC2 Instances using this Ubuntu AMI
  GatewayInstanceType:
    Type: String
    Description: Launch EC2 Instances in the Gateway AutoScaling Group using this
      Instance type
    Default: m3.large
  ControllerInstanceType:
    Type: String
    Description: Launch EC2 Instances in the Controller AutoScaling Group using this
      Instance type
    Default: m3.large
  WorkerInstanceType:
    Type: String
    Description: Launch EC2 Instances in the Worker AutoScaling Group using this Instance
      type
    Default: m3.large
  BastionInstanceType:
    Type: String
    Description: Launch the Bastion EC2 Instance using this Instance type
    Default: m3.medium
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Deploy all resources into this AvailabilityZone
  ClusterName:
    Type: String
    Description: Name of cluster; resources are tagged with this value
  ClusterVPC:
    Type: String
    Description: ID of VPC into which the Kubernetes cluster is deployed
  ClusterNetworkCIDR:
    Type: String
    Description: Network used for the ClusterVPC
  ClusterInternetGateway:
    Type: String
    Description: ID of Internet Gateway attached to ClusterVPC
  ClusterVPNGateway:
    Type: String
    Description: ID of VPN gateway available to the ClusterVPC
  PeerVPC:
    Type: String
    Description: ID of VPC made routable to and from the Kubernetes cluster
  PeerNetworkCIDR:
    Type: String
    Description: Network used for the PeerVPC
  PeerConnectionID:
    Type: String
    Description: ID of existing VPC Peering Connection that connects the PeerVPC to
      the ClusterVPC
  PublicSubnetCIDR:
    Type: String
    Description: Subnet used for the public-facing EC2 entities; must be contained
      within ClusterNetworkCIDR
  ControllerSubnetCIDR:
    Type: String
    Description: Subnet used for the controller EC2 instances; must be contained within
      ClusterNetworkCIDR
  WorkerSubnetCIDR:
    Type: String
    Description: Subnet used for the worker EC2 instances; must be contained within
      ClusterNetworkCIDR
  GatewayUserData:
    Type: String
    Description: Launch Gateway EC2 Instances with this UserData
  ControllerUserData:
    Type: String
    Description: Launch Controller EC2 Instances with this UserData
  WorkerUserData:
    Type: String
    Description: Launch Worker EC2 Instances with this UserData
  BastionUserData:
    Type: String
    Description: Launch Bastion EC2 Instances with this UserData
  BastionInstanceRootDiskSize:
    Type: Number
    Description: Size in GB of Bastion EC2 Instance root disk.
  BastionEbsOptimized:
    Type: String
    Description: Enable optimized EBS I/O
  ControllerInstanceCount:
    Type: Number
    Description: Number of EC2 Instances to provision as Controllers.
  ControllerInstanceRootDiskSize:
    Type: Number
    Description: Size in GB of Controller EC2 Instance root disk.
  ControllerEbsOptimized:
    Type: String
    Description: Enable optimized EBS I/O
  GatewayInstanceCount:
    Type: Number
    Description: Number of EC2 Instances to provision as Gateways.
  GatewayInstanceRootDiskSize:
    Type: Number
    Description: Size in GB of Gateway EC2 Instance root disk.
  GatewayEbsOptimized:
    Type: String
    Description: Enable optimized EBS I/O
  WorkerInstanceCount:
    Type: Number
    Description: Number of EC2 Instances to provision as Workers
  WorkerInstanceRootDiskSize:
    Type: Number
    Description: Size in GB of Worker EC2 Instance root disk.
  WorkerInstanceRootDiskIOPs:
    Type: Number
    Description: Number of IOPs to provision for the Worker EC2 Instance root disk.
  WorkerEbsOptimized:
    Type: String
    Description: Enable optimized EBS I/O
  HostedZone:
    Type: String
    Description: DNS zone hosted in Route 53 that will be used to provide DNS resolution
      for the Kubernetes API to external clients
  S3ConfigBucket:
    Type: String
    Description: S3 bucket that hosts the config tarball for this cluster. An object
      by the name of <ClusterName>.tar.gz must be present in this bucket.
